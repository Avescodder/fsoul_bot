import os
import re
from typing import List, Tuple
from bot.llm.base import BaseLLM, LLMResponse
from groq import Groq


class GroqLLM(BaseLLM):
    def __init__(self):
        self.api_key = os.getenv("GROQ_API_KEY")
        if not self.api_key:
            raise ValueError("GROQ_API_KEY not found in environment variables")
        
        self.client = Groq(api_key=self.api_key)
        self.model = os.getenv("GROQ_MODEL", "llama-3.3-70b-versatile")
    
    async def generate_answer(
        self, 
        question: str, 
        context: List[Tuple[str, str]] = None
    ) -> LLMResponse:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Groq API"""
        
        system_prompt = """–¢—ã ‚Äî –°–µ—Ä–≥–µ–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—é.

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –ø—É–Ω–∫—Ç—ã –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
- –ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã AI –∏–ª–∏ –±–æ—Ç

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
1. –ö—Ä–∞—Ç–∫–∏–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
2. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
- **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
- –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
- –ê–±–∑–∞—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

–û–¶–ï–ù–ö–ê –£–í–ï–†–ï–ù–ù–û–°–¢–ò:
–í –∫–æ–Ω—Ü–µ –ö–ê–ñ–î–û–ì–û –æ—Ç–≤–µ—Ç–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É:
CONFIDENCE: [—á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0]

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:
- **0.9-1.0**: –¢–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–≤–µ—Ä–µ–Ω
- **0.7-0.8**: –•–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã, –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
- **0.5-0.6**: –ß–∞—Å—Ç–∏—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–π
- **0.3-0.4**: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏
- **0.0-0.2**: –ù–µ —É–≤–µ—Ä–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å —ç–∫—Å–ø–µ—Ä—Ç–∞

–í–ê–ñ–ù–û: 
- –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë–∞–∑–∏—Ä—É–π—Å—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π —ç—Ç–æ –∏ –ø–æ—Å—Ç–∞–≤—å –Ω–∏–∑–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –ª—É—á—à–µ –ø—Ä–∏–∑–Ω–∞—Ç—å –Ω–µ–∑–Ω–∞–Ω–∏–µ"""

        user_prompt = f"–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {question}\n\n"
        
        if context and len(context) > 0:
            user_prompt += "üìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n\n"
            for i, (q, a) in enumerate(context[:3], 1):
                user_prompt += f"–ü—Ä–∏–º–µ—Ä {i}:\n"
                user_prompt += f"–í–æ–ø—Ä–æ—Å: {q}\n"
                user_prompt += f"–û—Ç–≤–µ—Ç: {a}\n\n"
            user_prompt += "---\n\n"
        else:
            user_prompt += "‚ö†Ô∏è –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π, –Ω–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é.\n\n"
        
        user_prompt += "–î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –°–µ—Ä–≥–µ—è —Å –æ—Ü–µ–Ω–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ü–µ."
        
        try:
            chat_completion = self.client.chat.completions.create(
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                model=self.model,
                temperature=0.7,
                max_tokens=1500,
                top_p=1,
                stream=False
            )
            
            content = chat_completion.choices[0].message.content
            
            confidence = self._extract_confidence(content)
            
            clean_answer = re.sub(
                r'\n*CONFIDENCE:\s*[\d\.]+\s*', 
                '', 
                content, 
                flags=re.IGNORECASE
            ).strip()
            
            return LLMResponse(
                answer=clean_answer,
                confidence=confidence,
                reasoning=f"Groq API ({self.model}), context items: {len(context) if context else 0}"
            )
            
        except Exception as e:
            print(f"‚ùå Groq API error: {e}")
            return LLMResponse(
                answer="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                confidence=0.0,
                reasoning=f"Error: {str(e)}"
            )
    
    def _extract_confidence(self, text: str) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ confidence –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        match = re.search(r'CONFIDENCE:\s*(0?\.\d+|1\.0|0|1)', text, re.IGNORECASE)
        if match:
            try:
                confidence_value = float(match.group(1))
                return max(0.0, min(1.0, confidence_value))
            except ValueError:
                pass
        
        print("‚ö†Ô∏è CONFIDENCE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ LLM, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.5")
        return 0.5
    
    async def generate_embedding(self, text: str) -> List[float]:
        """
        Groq –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç embeddings API.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å sentence-transformers.
        """
        try:
            from sentence_transformers import SentenceTransformer
            
            if not hasattr(self, '_embedding_model'):
                print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ embedding –º–æ–¥–µ–ª–∏...")
                self._embedding_model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
            
            embedding = self._embedding_model.encode(text)
            return embedding.tolist()
            
        except ImportError:
            raise ImportError(
                "sentence-transformers not installed. "
                "Install it with: pip install sentence-transformers"
            )
        except Exception as e:
            print(f"‚ùå Embedding generation error: {e}")
            return [0.0] * 768
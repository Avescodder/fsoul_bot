from telegram import Update
from telegram.ext import ContextTypes
from database import get_db
from database.models import User, Question, PendingQuestion
from utils.rag import RAGSystem
from bot.llm import get_llm
from bot.handlers.admin import is_admin
import os
from datetime import datetime


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            user = User(
                telegram_id=user_id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            db.add(user)
            db.commit()
    
    if is_admin():
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n"
            "/pending - –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/answer <ID> <—Ç–µ–∫—Å—Ç> - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å\n\n"
            "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
    else:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—é.\n\n"
            "–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. "
            "–ï—Å–ª–∏ —è –Ω–µ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å—Ä–∞–∑—É, –ø–µ—Ä–µ–¥–∞–º –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    
    admin_ids = os.getenv("ADMIN_TELEGRAM_IDS", "").split(",")
    admin_ids = [int(aid.strip()) for aid in admin_ids if aid.strip()]
    is_admin = user_id in admin_ids
    
    if is_admin:
        await update.message.reply_text(
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞:\n\n"
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/pending - –ø–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
            "/answer <ID> <—Ç–µ–∫—Å—Ç> - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å\n\n"
            "üë§ –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° –ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
            "1. –ü–æ–ª—É—á–∞–µ—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–µ—à—å /answer <ID> <—Ç–≤–æ–π –æ—Ç–≤–µ—Ç>\n"
            "3. –û—Ç–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            "4. –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç Q&A –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –æ–±—É—á–∏—Ç—Å—è"
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—é\n"
            "‚Ä¢ –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π, —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n"
            "‚Ä¢ –¢—ã –ø–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )


async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    question_text = update.message.text
    user_tg_id = update.effective_user.id
    
    await update.message.chat.send_action("typing")
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_tg_id).first()
        if not user:
            user = User(
                telegram_id=user_tg_id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            db.add(user)
            db.commit()
            db.refresh(user)
        
        llm = get_llm()
        question_embedding = await llm.generate_embedding(question_text)
        
        question = Question(
            user_id=user.id,
            message_id=update.message.message_id,
            question_text=question_text,
            question_embedding=question_embedding,
            status="processing"
        )
        db.add(question)
        db.commit()
        db.refresh(question)
        
        rag = RAGSystem(llm)
        answer, confidence, context = await rag.get_answer(db, question_text)
        
        threshold = float(os.getenv("CONFIDENCE_THRESHOLD", "0.7"))
        
        if confidence >= threshold:
            question.answer_text = answer
            question.confidence_score = confidence
            question.answered_by_ai = True
            question.status = "answered"
            question.answered_at = datetime.utcnow()
            db.commit()
            
            await update.message.reply_text(
                f"{answer}\n\n"
                f"ü§ñ _–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})_",
                parse_mode="Markdown"
            )
            
        else:
            question.confidence_score = confidence
            question.status = "escalated"
            db.commit()
            
            pending = PendingQuestion(
                question_id=question.id,
                user_telegram_id=user_tg_id
            )
            db.add(pending)
            db.commit()
            
            await update.message.reply_text(
                "ü§î –°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.\n"
                "–û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤."
            )
            
            await notify_admins(update, context, question.id, user, question_text, confidence)


async def notify_admins(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    question_id: int,
    user: User,
    question_text: str,
    confidence: float
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º"""
    admin_ids = os.getenv("ADMIN_TELEGRAM_IDS", "").split(",")
    admin_ids = [int(aid.strip()) for aid in admin_ids if aid.strip()]
    
    message_text = (
        f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{question_id}\n\n"
        f"–û—Ç: {user.first_name or ''} {user.last_name or ''} "
        f"(@{user.username or '–±–µ–∑ username'})\n"
        f"ID: {user.telegram_id}\n\n"
        f"–í–æ–ø—Ä–æ—Å:\n{question_text}\n\n"
        f"ü§ñ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {confidence:.0%}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /answer {question_id} <—Ç–≤–æ–π –æ—Ç–≤–µ—Ç> –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
    )
    
    bot = context.bot if context else update.get_bot()
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(chat_id=admin_id, text=message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")
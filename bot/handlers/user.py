from telegram import Update
from telegram.ext import ContextTypes
from database import get_db
from database.models import User, Question, PendingQuestion
from utils.improved_rag import ImprovedRAGSystemWithTavily
from bot.llm import get_llm
from bot.handlers.admin import is_admin
import os
from datetime import datetime


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            user = User(
                telegram_id=user_id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            db.add(user)
            db.commit()
    
    if is_admin(user_id):
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/pending - –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/answer <ID> <—Ç–µ–∫—Å—Ç> - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"
        )
    else:
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –°–µ—Ä–≥–µ–π.\n\n"
            "–Ø —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—é —Å –±–æ–ª–µ–µ —á–µ–º 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. "
            "–ü–æ–º–æ–≥—É –≤–∞–º —Å –≤–∏–∑–∞–º–∏, –í–ù–ñ, –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ–º –∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–µ—Ä–µ–µ–∑–¥–∞.\n\n"
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º —è–∑—ã–∫–µ!"
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    
    if is_admin(user_id):
        await update.message.reply_text(
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã:\n"
            "/pending - –æ—á–µ—Ä–µ–¥—å –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/answer <ID> <—Ç–µ–∫—Å—Ç> - –æ—Ç–≤–µ—Ç–∏—Ç—å\n\n"
            "ü§ñ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö!"
        )
    else:
        await update.message.reply_text(
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:\n\n"
            "‚úàÔ∏è –í–∏–∑–∞–º–∏ (D7, Golden Visa, D2)\n"
            "üè† –í–ù–ñ –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ–º\n"
            "üíº –û—Ç–∫—Ä—ã—Ç–∏–µ–º –±–∏–∑–Ω–µ—Å–∞\n"
            "üí∞ –ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ–º –∏ NHR\n"
            "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ!"
        )


async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    question_text = update.message.text
    user_tg_id = update.effective_user.id
    
    lang = detect_language(question_text)
    
    await update.message.chat.send_action("typing")
    
    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == user_tg_id).first()
        if not user:
            user = User(
                telegram_id=user_tg_id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name
            )
            db.add(user)
            db.commit()
            db.refresh(user)
        
        llm = get_llm()
        question_embedding = await llm.generate_embedding(question_text)
        
        question = Question(
            user_id=user.id,
            message_id=update.message.message_id,
            question_text=question_text,
            question_embedding=question_embedding,
            status="processing"
        )
        db.add(question)
        db.commit()
        db.refresh(question)
        
        rag = ImprovedRAGSystemWithTavily(
        llm=llm,
        tavily_api_key=os.getenv("TAVILY_API_KEY")
        )
        answer, confidence, context_data = await rag.get_answer_with_web_search(
            db=db,
            question=question_text,
            user_id=user.id,
            use_web_search=False,  
            search_depth="basic"
        )
                
        threshold = float(os.getenv("CONFIDENCE_THRESHOLD", "0.7"))
        
        should_escalate = should_escalate_to_admin(
            question_text=question_text,
            confidence=confidence,
            threshold=threshold,
            context_available=len(context_data) > 0
        )
        
        print(f"üìä Q: {question_text[:50]}... | Conf: {confidence:.2%} | Escalate: {should_escalate}")
        
        if not should_escalate:
            question.answer_text = answer
            question.confidence_score = confidence
            question.answered_by_ai = True
            question.status = "answered"
            question.answered_at = datetime.utcnow()
            db.commit()
            
            await update.message.reply_text(answer)
            
        else:
            question.confidence_score = confidence
            question.status = "escalated"
            db.commit()
            
            pending = PendingQuestion(
                question_id=question.id,
                user_telegram_id=user_tg_id
            )
            db.add(pending)
            db.commit()
            
            escalation_messages = {
                'ru': "–í–∞—à –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. –Ø –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –≤–µ—Ä–Ω—É—Å—å —Å —Ç–æ—á–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                'en': "Your question requires detailed analysis. I'll consult with colleagues and get back to you with a precise answer shortly.",
                'pt': "Sua pergunta requer an√°lise detalhada. Vou consultar colegas e retornarei com uma resposta precisa em breve."
            }
            
            await update.message.reply_text(escalation_messages.get(lang, escalation_messages['ru']))
            
            await notify_admins(update, context, question.id, user, question_text, confidence)


def should_escalate_to_admin(
    question_text: str,
    confidence: float,
    threshold: float,
    context_available: bool
) -> bool:
    """
    –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –∞–¥–º–∏–Ω—É
    """
    
    simple_keywords = [
        '–ø—Ä–∏–≤–µ—Ç', '—Å–ø–∞—Å–∏–±–æ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ø–æ–∫–∞', '–±–ª–∞–≥–æ–¥–∞—Ä—é',
        'hi', 'hello', 'thanks', 'thank you', 'bye',
        'ol√°', 'obrigado', 'tchau'
    ]
    
    q_lower = question_text.lower()
    if any(kw in q_lower for kw in simple_keywords) and len(question_text.split()) < 10:
        return False
    
    if context_available and confidence >= 0.65:
        return False
    
    if confidence >= threshold:
        return False
    
    critical_keywords = [
        '–¥–µ–ø–æ—Ä—Ç–∞—Ü–∏—è', '–æ—Ç–∫–∞–∑', '—Å—É–¥–µ–±–Ω—ã–π', '–∞–ø–µ–ª–ª—è—Ü–∏—è',
        'deportation', 'refusal', 'court', 'appeal',
        'deporta√ß√£o', 'recusa', 'tribunal'
    ]
    
    if any(kw in q_lower for kw in critical_keywords) and confidence < 0.75:
        return True
    
    return confidence < threshold


def detect_language(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    text_lower = text.lower()
    
    if any(c in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in text_lower):
        return 'ru'
    
    pt_words = ['voc√™', 'n√£o', 'sim', 'obrigado', 'por favor', 'est√°', 'tamb√©m', 'quando']
    if any(word in text_lower for word in pt_words):
        return 'pt'
    
    return 'en'


async def notify_admins(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    question_id: int,
    user: User,
    question_text: str,
    confidence: float
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º"""
    admin_ids = os.getenv("ADMIN_TELEGRAM_IDS", "").split(",")
    admin_ids = [int(aid.strip()) for aid in admin_ids if aid.strip()]
    
    message_text = (
        f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{question_id}\n\n"
        f"üë§ –û—Ç: {user.first_name or ''} {user.last_name or ''} "
        f"(@{user.username or '–±–µ–∑ username'})\n"
        f"üÜî Telegram ID: {user.telegram_id}\n\n"
        f"üìù –í–æ–ø—Ä–æ—Å:\n{question_text}\n\n"
        f"ü§ñ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {confidence:.1%}\n\n"
        f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å: /answer {question_id} <—Ç–µ–∫—Å—Ç>"
    )
    
    bot = context.bot if hasattr(context, 'bot') else update.get_bot()
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(chat_id=admin_id, text=message_text)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")
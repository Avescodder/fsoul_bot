from telegram import Update
from telegram.ext import ContextTypes
from database import get_db
from database.models import Question, User, PendingQuestion
from utils.improved_rag import ImprovedRAGSystemWithTavily
from bot.llm import get_llm
import os
from datetime import datetime


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    admin_ids = os.getenv("ADMIN_TELEGRAM_IDS", "").split(",")
    admin_ids = [int(aid.strip()) for aid in admin_ids if aid.strip()]
    return user_id in admin_ids


async def answer_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /answer –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    –§–æ—Ä–º–∞—Ç: /answer <question_id> <–æ—Ç–≤–µ—Ç>
    """
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /answer <ID –≤–æ–ø—Ä–æ—Å–∞> <—Ç–≤–æ–π –æ—Ç–≤–µ—Ç>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /answer 42 –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—ã –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã..."
        )
        return
    
    try:
        question_id = int(context.args[0])
        answer_text = " ".join(context.args[1:])
    except ValueError:
        await update.message.reply_text("‚ùå ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    with get_db() as db:
        question = db.query(Question).filter(Question.id == question_id).first()
        
        if not question:
            await update.message.reply_text(f"‚ùå –í–æ–ø—Ä–æ—Å #{question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if question.status == "answered":
            await update.message.reply_text(f"‚ö†Ô∏è –ù–∞ –≤–æ–ø—Ä–æ—Å #{question_id} —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏")
            return
        
        question.answer_text = answer_text
        question.answered_by_ai = False
        question.answered_by_admin_id = update.effective_user.id
        question.status = "answered"
        question.answered_at = datetime.utcnow()
        db.commit()
        
        llm = get_llm()
        rag = ImprovedRAGSystemWithTavily(
            llm=llm,
            tavily_api_key=os.getenv("TAVILY_API_KEY")
        )
        await rag.add_to_knowledge_base(
            db,
            question=question.question_text,
            answer=answer_text,
            source="admin",
            verified=True
        )
        
        db.query(PendingQuestion).filter(
            PendingQuestion.question_id == question_id
        ).delete()
        db.commit()
        
        try:
            bot = context.bot if hasattr(context, 'bot') else update.get_bot()
            await bot.send_message(
                chat_id=question.user.telegram_id,
                text=answer_text  
            )
            
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n"
                f"üìù –í–æ–ø—Ä–æ—Å #{question_id} –∑–∞–∫—Ä—ã—Ç\n"
                f"üìö –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"
            )
        except Exception as e:
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n{e}\n\n"
                f"üìö Q&A –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"
            )


async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    with get_db() as db:
        pending_questions = db.query(PendingQuestion, Question, User).join(
            Question, PendingQuestion.question_id == Question.id
        ).join(
            User, Question.user_id == User.id
        ).filter(
            Question.status == "escalated"
        ).order_by(Question.created_at.desc()).all()
        
        if not pending_questions:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏!")
            return
        
        message = "üìã *–í–æ–ø—Ä–æ—Å—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:*\n\n"
        
        for pending, question, user in pending_questions:
            question_preview = question.question_text
            if len(question_preview) > 100:
                question_preview = question_preview[:97] + "..."
            
            time_str = question.created_at.strftime('%d.%m %H:%M')
            confidence_pct = f"{question.confidence_score:.0%}" if question.confidence_score else "N/A"
            
            message += (
                f"*#{question.id}* | {user.first_name or 'User'} (@{user.username or '–Ω–µ—Ç'})\n"
                f"üìù _{question_preview}_\n"
                f"ü§ñ AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_pct}\n"
                f"‚è∞ {time_str}\n\n"
            )
        
        message += "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π: `/answer <ID> <–æ—Ç–≤–µ—Ç>`"
        
        await update.message.reply_text(message, parse_mode="Markdown")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    with get_db() as db:
        total_questions = db.query(Question).count()
        answered_by_ai = db.query(Question).filter(
            Question.answered_by_ai
        ).count()
        answered_by_admin = db.query(Question).filter(
            not Question.answered_by_ai,
            Question.status == "answered"
        ).count()
        pending = db.query(Question).filter(
            Question.status == "escalated"
        ).count()
        total_users = db.query(User).count()
        
        from database.models import KnowledgeBase
        kb_size = db.query(KnowledgeBase).count()
        
        avg_response_time = None
        answered_questions = db.query(Question).filter(
            Question.answered_at.isnot(None),
            Question.created_at.isnot(None)
        ).all()
        
        if answered_questions:
            total_time = sum([
                (q.answered_at - q.created_at).total_seconds() 
                for q in answered_questions
            ])
            avg_response_time = total_time / len(answered_questions) / 3600 
        
        message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
            f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: `{total_questions}`\n"
            f"ü§ñ –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI: `{answered_by_ai}`\n"
            f"üë®‚Äçüíº –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–æ–≤: `{answered_by_admin}`\n"
            f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: `{pending}`\n"
            f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: `{kb_size}` –∑–∞–ø–∏—Å–µ–π\n"
        )
        
        if avg_response_time:
            message += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: `{avg_response_time:.1f}` —á\n"
        
        if total_questions > 0:
            ai_percentage = (answered_by_ai / total_questions) * 100
            message += f"\nüí° AI —Ä–µ—à–∞–µ—Ç *{ai_percentage:.1f}%* –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        
        await update.message.reply_text(message, parse_mode="Markdown")
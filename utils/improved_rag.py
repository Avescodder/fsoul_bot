import os
import httpx
import logging
from typing import Optional, List, Dict, Any, Tuple
from datetime import datetime, timedelta
from sqlalchemy import select
from sqlalchemy.orm import Session
from database.models import KnowledgeBase, Question

logger = logging.getLogger(__name__)


class TavilyWebSearch:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tavily API –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.getenv("TAVILY_API_KEY")
        self.base_url = "https://api.tavily.com/search"
        self.timeout = 10.0
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è TAVILY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–µ–±-–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")
    
    async def search(
        self, 
        query: str,
        max_results: int = 5,
        include_answer: bool = True,
        search_depth: str = "basic",
        topic: str = "general"
    ) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily"""
        if not self.api_key:
            logger.error("‚ùå API –∫–ª—é—á Tavily –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        try:
            payload = {
                "api_key": self.api_key,
                "query": query,
                "max_results": min(max_results, 20),
                "include_answer": include_answer,
                "search_depth": search_depth,
                "topic": topic,
                "include_images": False,
                "include_raw_content": True
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.base_url,
                    json=payload,
                    timeout=self.timeout
                )
                response.raise_for_status()
                
                data = response.json()
                logger.info(f"‚úÖ Tavily –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω: {query}")
                return data
        
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ Tavily ({e.response.status_code}): {e.response.text}")
            return None
        except httpx.TimeoutException:
            logger.error(f"‚è±Ô∏è Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Tavily")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Tavily: {e}")
            return None
    
    async def format_results(
        self, 
        search_data: Dict[str, Any],
        max_sources: int = 5
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
        if not search_data:
            return ""
        
        result = ""
        
        if search_data.get("answer"):
            result += f"üìå –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç: {search_data['answer']}\n\n"
        
        results = search_data.get("results", [])
        if results:
            result += f"üìö –¢–æ–ø-{min(len(results), max_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
            
            for idx, item in enumerate(results[:max_sources], 1):
                title = item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                content = item.get("content", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                url = item.get("url", "")
                
                result += f"\n{idx}. {title}\n"
                result += f"   {content[:200]}...\n"
                if url:
                    result += f"   üîó {url}\n"
        
        return result.strip()


class ImprovedRAGSystemWithTavily:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ —Å Tavily –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""
    
    def __init__(self, llm, top_k: int = 5, tavily_api_key: Optional[str] = None):
        self.llm = llm
        self.top_k = top_k
        self.conversation_cache = {}
        self.web_search = TavilyWebSearch(api_key=tavily_api_key)
        
        self.search_cache = {}
        self.cache_ttl = timedelta(hours=1)
    
    async def search_similar(
        self, 
        db: Session, 
        question: str
    ) -> List[Tuple[str, str, float]]:
        """
        –ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        
        Returns:
            List[(question, answer, similarity)]
        """
        try:
            question_embedding = await self.llm.generate_embedding(question)
            
            results = db.execute(
                select(
                    KnowledgeBase.question,
                    KnowledgeBase.answer,
                    KnowledgeBase.question_embedding.cosine_distance(question_embedding).label('distance')
                )
                .where(KnowledgeBase.verified == True)
                .order_by('distance')
                .limit(self.top_k)
            ).fetchall()
            
            similar = [
                (r.question, r.answer, 1 - r.distance) 
                for r in results 
                if r.distance < 0.5
            ]
            
            return similar
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö: {e}")
            return []
    
    def get_conversation_history(
        self,
        db: Session,
        user_id: int,
        limit: int = 3
    ) -> List[Tuple[str, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            history = db.query(Question).filter(
                Question.user_id == user_id,
                Question.status == "answered",
                Question.answer_text.isnot(None)
            ).order_by(Question.created_at.desc()).limit(limit).all()
            
            return [
                (q.question_text, q.answer_text) 
                for q in reversed(history)
            ]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    async def _search_web(
        self, 
        query: str,
        use_cache: bool = True,
        search_depth: str = "basic"
    ) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–µ—à–∞"""
        if use_cache and query in self.search_cache:
            cached_time, cached_result = self.search_cache[query]
            if datetime.utcnow() - cached_time < self.cache_ttl:
                logger.info(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞ –¥–ª—è: {query}")
                return cached_result
        
        search_data = await self.web_search.search(
            query=query,
            max_results=5,
            include_answer=True,
            search_depth=search_depth,
            topic="general"
        )
        
        if not search_data:
            return None
        
        formatted = await self.web_search.format_results(search_data, max_sources=5)
        
        if use_cache:
            self.search_cache[query] = (datetime.utcnow(), formatted)
        
        return formatted
    
    async def get_answer_with_web_search(
        self,
        db: Session,
        question: str,
        user_id: int,
        use_web_search: bool = False,
        search_depth: str = "basic"
    ) -> Tuple[str, float, List[Tuple[str, str]]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG + –∫–æ–Ω—Ç–µ–∫—Å—Ç + –≤–µ–±-–ø–æ–∏—Å–∫
        
        Returns:
            (answer, confidence, context_sources)
        """
        kb_context = await self.search_similar(db, question)
        
        conversation_history = self.get_conversation_history(db, user_id, limit=3)
        
        web_context = None
        if use_web_search or (not kb_context and not self.is_simple_question(question)):
            web_context = await self._search_web(
                question, 
                use_cache=True,
                search_depth=search_depth
            )
            if web_context:
                logger.info(f"üåê –î–æ–±–∞–≤–ª–µ–Ω –≤–µ–±-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
        
        response = await self.llm.generate_answer(
            question=question,
            context=[(q, a) for q, a, _ in kb_context],
            conversation_history=conversation_history,
            web_context=web_context
        )
        
        if kb_context and kb_context[0][2] > 0.8:
            response.confidence = max(response.confidence, 0.85)
        elif web_context:
            response.confidence = max(response.confidence, 0.75)
        
        sources = [(q, a) for q, a, _ in kb_context]
        if web_context:
            sources.append(("Web Search", web_context))
        
        return response.answer, response.confidence, sources
    
    def is_simple_question(self, question: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        simple_patterns = [
            '—Å–ø–∞—Å–∏–±–æ', 'thanks', 'obrigado',
            '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ', 'got it', 'ok',
            '–¥–∞', '–Ω–µ—Ç', 'yes', 'no'
        ]
        q_lower = question.lower().strip()
        return any(p in q_lower for p in simple_patterns) and len(question.split()) < 10
    
    async def add_to_knowledge_base(
        self,
        db: Session,
        question: str,
        answer: str,
        source: str = "admin",
        verified: bool = True
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–∞—Ä—É Q&A –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            embedding = await self.llm.generate_embedding(question)
            
            kb_entry = KnowledgeBase(
                question=question,
                answer=answer,
                question_embedding=embedding,
                source=source,
                verified=verified
            )
            
            db.add(kb_entry)
            db.commit()
            
            return kb_entry
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ KB: {e}")
            db.rollback()
            raise
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à –ø–æ–∏—Å–∫–∞"""
        self.search_cache.clear()
        logger.info("üóëÔ∏è –ö–µ—à –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω")
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
from database import get_db, init_db
from database.models import User, Question, KnowledgeBase, PendingQuestion
from bot.llm import get_llm
from utils.rag import RAGSystem


async def seed_knowledge_base():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üå± –ó–∞–ø–æ–ª–Ω—è—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    llm = get_llm()
    rag = RAGSystem(llm)
    
    initial_knowledge = [
        (
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –≤–∏–∑—ã D7?",
            "–î–ª—è –≤–∏–∑—ã D7 –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã: –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–∞—Å–ø–æ—Ä—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3.5x4.5 —Å–º, "
            "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (–º–∏–Ω–∏–º—É–º ‚Ç¨760/–º–µ—Å—è—Ü), —Å–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏, "
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏."
        ),
        (
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∑—ã D7?",
            "–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—ã D7 –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 2-3 –º–µ—Å—è—Ü–∞ –æ—Ç –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ "
            "–¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—ã. –í—Ä–µ–º—è –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–∞."
        ),
        (
            "–ß—Ç–æ —Ç–∞–∫–æ–µ NIF –∏ –∫–∞–∫ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å?",
            "NIF (N√∫mero de Identifica√ß√£o Fiscal) - —ç—Ç–æ –Ω–∞–ª–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏. "
            "–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ (Finan√ßas) –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è. "
            "–û–±—ã—á–Ω–æ –≤—ã–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
        ),
        (
            "–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω—É–∂–µ–Ω –¥–ª—è D7?",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è –≤–∏–∑—ã D7: ‚Ç¨760/–º–µ—Å—è—Ü –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞—è–≤–∏—Ç–µ–ª—è, "
            "+50% (‚Ç¨380) –Ω–∞ —Å—É–ø—Ä—É–≥–∞, +30% (‚Ç¨228) –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏–ª–∏ –∏–∂–¥–∏–≤–µ–Ω—Ü–∞."
        ),
        (
            "–ú–æ–∂–Ω–æ –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–∏–∑–µ D7?",
            "–î–∞, –≤–∏–∑–∞ D7 –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏. –û–¥–Ω–∞–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ - "
            "–Ω–∞–ª–∏—á–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞. –†–∞–±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º, –∞ –Ω–µ –æ—Å–Ω–æ–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º."
        ),
        (
            "–ö–∞–∫–∏–µ –Ω–∞–ª–æ–≥–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏ –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤?",
            "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —à–∫–∞–ª–∞ –ø–æ–¥–æ—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–∞: –æ—Ç 14.5% –¥–æ 48%. –í–æ–∑–º–æ–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è "
            "–≤ —Ä–µ–∂–∏–º–µ NHR (Non-Habitual Resident) —Å –ª—å–≥–æ—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏ –Ω–∞ 10 –ª–µ—Ç."
        ),
        (
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∂–∏–º NHR?",
            "NHR (Non-Habitual Resident) - –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏. "
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–ª–∞—Ç–∏—Ç—å 0-20% –Ω–∞–ª–æ–≥–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –ª–µ—Ç."
        ),
        (
            "–ù—É–∂–Ω–æ –ª–∏ –∑–Ω–∞—Ç—å –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –¥–ª—è D7?",
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—ã D7 –∑–Ω–∞–Ω–∏–µ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –û–¥–Ω–∞–∫–æ –¥–ª—è "
            "–ø–æ–ª—É—á–µ–Ω–∏—è –í–ù–ñ –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å A2."
        )
    ]
    
    with get_db() as db:
        for question, answer in initial_knowledge:
            try:
                await rag.add_to_knowledge_base(
                    db,
                    question=question,
                    answer=answer,
                    source="manual",
                    verified=True
                )
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {question[:50]}...")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(initial_knowledge)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")


def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    with get_db() as db:
        users_count = db.query(User).count()
        questions_count = db.query(Question).count()
        kb_count = db.query(KnowledgeBase).count()
        pending_count = db.query(PendingQuestion).count()
        
        answered_by_ai = db.query(Question).filter(
            Question.answered_by_ai == True
        ).count()
        
        answered_by_admin = db.query(Question).filter(
            Question.answered_by_ai == False,
            Question.status == "answered"
        ).count()
        
        print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
        print(f"   ‚îú‚îÄ –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI: {answered_by_ai}")
        print(f"   ‚îú‚îÄ –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–æ–≤: {answered_by_admin}")
        print(f"   ‚îî‚îÄ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}")
        print(f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {kb_count} –∑–∞–ø–∏—Å–µ–π")
        
        if questions_count > 0:
            ai_rate = (answered_by_ai / questions_count) * 100
            print(f"\nü§ñ AI Resolution Rate: {ai_rate:.1f}%")
        
        from sqlalchemy import func
        avg_confidence = db.query(func.avg(Question.confidence_score)).scalar()
        if avg_confidence:
            print(f"üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2%}")
        
        from sqlalchemy import desc
        top_users = db.query(
            User.first_name,
            User.username,
            func.count(Question.id).label('count')
        ).join(Question).group_by(User.id).order_by(desc('count')).limit(5).all()
        
        if top_users:
            print(f"\nüëë –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for i, (name, username, count) in enumerate(top_users, 1):
                print(f"   {i}. {name or username or '–ê–Ω–æ–Ω–∏–º'}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")


def clear_database():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"""
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!")
    confirm = input("–í–≤–µ–¥–∏ 'DELETE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    
    if confirm != "DELETE":
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    with get_db() as db:
        db.query(PendingQuestion).delete()
        db.query(Question).delete()
        db.query(KnowledgeBase).delete()
        db.query(User).delete()
        db.commit()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")


def export_knowledge_base(filename: str = "knowledge_base_export.txt"):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    print(f"\nüì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ {filename}...")
    
    with get_db() as db:
        kb_entries = db.query(KnowledgeBase).filter(
            KnowledgeBase.verified == True
        ).order_by(KnowledgeBase.usage_count.desc()).all()
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("# –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô IMMIGRATION BOT\n")
            f.write(f"# –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(kb_entries)}\n")
            f.write("=" * 80 + "\n\n")
            
            for i, entry in enumerate(kb_entries, 1):
                f.write(f"## –ó–∞–ø–∏—Å—å #{i}\n")
                f.write(f"–í–æ–ø—Ä–æ—Å: {entry.question}\n\n")
                f.write(f"–û—Ç–≤–µ—Ç: {entry.answer}\n\n")
                f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {entry.source}\n")
                f.write(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {entry.usage_count}\n")
                f.write(f"–°–æ–∑–¥–∞–Ω–æ: {entry.created_at}\n")
                f.write("-" * 80 + "\n\n")
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(kb_entries)} –∑–∞–ø–∏—Å–µ–π")


async def test_rag_search(query: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG –ø–æ–∏—Å–∫"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è: '{query}'")
    print("=" * 60)
    
    llm = get_llm()
    rag = RAGSystem(llm)
    
    with get_db() as db:
        similar = await rag.search_similar(db, query)
        
        if not similar:
            print("‚ùå –ü–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(similar)} –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n")
        
        for i, (q, a) in enumerate(similar, 1):
            print(f"{i}. –í–æ–ø—Ä–æ—Å: {q}")
            print(f"   –û—Ç–≤–µ—Ç: {a[:100]}...")
            print()


def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ç–∏–ª–∏—Ç—ã"""
    while True:
        print("\n" + "=" * 60)
        print("üõ†Ô∏è  DATABASE MANAGER")
        print("=" * 60)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print("3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        print("4. –¢–µ—Å—Ç RAG –ø–æ–∏—Å–∫–∞")
        print("5. –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (‚ö†Ô∏è  –æ–ø–∞—Å–Ω–æ)")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é: ")
        
        if choice == "1":
            show_stats()
        elif choice == "2":
            asyncio.run(seed_knowledge_base())
        elif choice == "3":
            filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (Enter –¥–ª—è knowledge_base_export.txt): ").strip()
            export_knowledge_base(filename or "knowledge_base_export.txt")
        elif choice == "4":
            query = input("–í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
            if query:
                asyncio.run(test_rag_search(query))
        elif choice == "5":
            clear_database()
        elif choice == "0":
            print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    main_menu()
name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:  

jobs:
  deploy:
    name: Deploy Bot
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            if [ ! -d "${{ secrets.PROJECT_PATH }}" ]; then
              echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞..."
              mkdir -p ${{ secrets.PROJECT_PATH }}
              cd ${{ secrets.PROJECT_PATH }}
              
              echo "üì• –ü–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∫–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
              git clone https://github.com/${{ github.repository }}.git .
            else
              echo "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º..."
              cd ${{ secrets.PROJECT_PATH }}
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –ª–∏ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
              if [ ! -d ".git" ]; then
                echo "‚ö†Ô∏è –ù–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º..."
                git init
                git remote add origin https://github.com/${{ github.repository }}.git
                git fetch origin
                git checkout -b main origin/main
              else
                echo "üì• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥..."
                git fetch origin
                git reset --hard origin/main
              fi
            fi
            
            cd ${{ secrets.PROJECT_PATH }}
            
            # –°–æ–∑–¥–∞–µ–º .env –∏–∑ GitHub Secrets
            echo "üìù –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª..."
            cat > .env << 'ENVEOF'
            # Telegram
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            ADMIN_TELEGRAM_IDS=${{ secrets.ADMIN_TELEGRAM_IDS }}
            
            # Database
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_USER }}
            
            # LLM Provider
            LLM_PROVIDER=${{ secrets.LLM_PROVIDER }}
            
            # OpenAI
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
            OPENAI_EMBEDDING_MODEL=${{ secrets.OPENAI_EMBEDDING_MODEL }}
            
            # Groq (optional)
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            GROQ_MODEL=${{ secrets.GROQ_MODEL }}
            
            # Bot settings
            CONFIDENCE_THRESHOLD=${{ secrets.CONFIDENCE_THRESHOLD }}
            TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
            ENVEOF
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env
            if [ ! -f .env ]; then
              echo "‚ùå ERROR: Failed to create .env file!"
              exit 1
            fi
            
            echo "‚úÖ .env file created successfully"
            
            # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω)
            if [ "$(docker ps -q -f name=immigration_bot_db)" ]; then
              echo "üì¶ Creating database backup..."
              docker-compose exec -T db pg_dump -U ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_DB }} > backup_$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || echo "‚ö†Ô∏è Backup skipped"
            fi
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è volumes!)
            echo "‚èπÔ∏è Stopping containers..."
            docker-compose down || echo "No containers to stop"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            mkdir -p logs backups data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
            echo "üîç Checking if migration needed..."
            NEED_MIGRATION=false
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ volume —Å –¥–∞–Ω–Ω—ã–º–∏
            if docker volume ls | grep -q "postgres_data"; then
              echo "üìä Database volume exists, checking vector dimensions..."
              
              # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
              docker-compose up -d db
              sleep 10
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
              CURRENT_DIM=$(docker-compose exec -T db psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -t -c "
                SELECT atttypmod 
                FROM pg_attribute 
                WHERE attrelid = 'questions'::regclass 
                AND attname = 'question_embedding'
              " 2>/dev/null | tr -d ' ' || echo "0")
              
              EXPECTED_DIM=1536
              if [ "${{ secrets.LLM_PROVIDER }}" != "openai" ]; then
                EXPECTED_DIM=768
              fi
              
              if [ "$CURRENT_DIM" != "$EXPECTED_DIM" ] && [ "$CURRENT_DIM" != "0" ]; then
                echo "‚ö†Ô∏è Vector dimension mismatch: current=$CURRENT_DIM, expected=$EXPECTED_DIM"
                NEED_MIGRATION=true
              fi
              
              docker-compose down
            fi
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if [ "$NEED_MIGRATION" = true ]; then
              echo "üîß Running vector dimension migration..."
              docker-compose up -d db
              sleep 10
              echo "yes" | docker-compose run --rm bot python migrate_vector_dimension.py || echo "‚ö†Ô∏è Migration failed or not needed"
              docker-compose down
            fi
            
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            echo "üöÄ Starting all services..."
            docker-compose up -d --build
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Shadowsocks
            echo "üîç Checking Shadowsocks..."
            if docker logs shadowsocks-client 2>&1 | grep -q "listening"; then
              echo "‚úÖ Shadowsocks is running"
            else
              echo "‚ö†Ô∏è Shadowsocks may not be running properly"
              docker logs shadowsocks-client --tail=20
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
            echo "üîç Checking bot..."
            BOT_LOGS=$(docker logs immigration_bot 2>&1)
            
            if echo "$BOT_LOGS" | grep -q "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"; then
              echo "‚úÖ Bot is running successfully"
            elif echo "$BOT_LOGS" | grep -qi "error\|traceback\|exception"; then
              echo "‚ùå Bot has errors:"
              echo "$BOT_LOGS" | tail -30
            else
              echo "‚ö†Ô∏è Bot status unclear, showing logs:"
              echo "$BOT_LOGS" | tail -30
            fi
            
            # –°—Ç–∞—Ç—É—Å
            echo ""
            echo "‚úÖ Deployment status:"
            docker-compose ps
            
            echo ""
            echo "üìã Full bot logs:"
            docker logs immigration_bot --tail=100
            
      - name: Send Telegram notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ${{ job.status == 'success' && '‚úÖ' || '‚ùå' }} –î–µ–ø–ª–æ–π ${{ job.status == 'success' && '—É—Å–ø–µ—à–µ–Ω' || '–ø—Ä–æ–≤–∞–ª–µ–Ω' }}!
            
            –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
            –ö–æ–º–º–∏—Ç: ${{ github.sha }}
            –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            –í–µ—Ç–∫–∞: ${{ github.ref_name }}
            
            ${{ job.status == 'success' && 'üîê Shadowsocks –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' || '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' }}
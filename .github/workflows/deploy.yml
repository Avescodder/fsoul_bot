name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:  

jobs:
  deploy:
    name: Deploy Bot
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}
            
            # –°–æ–∑–¥–∞–µ–º .env –∏–∑ GitHub Secrets
            cat > .env << 'ENVEOF'
            # Telegram
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            ADMIN_TELEGRAM_IDS=${{ secrets.ADMIN_TELEGRAM_IDS }}
            
            # Database
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            
            # LLM Provider
            LLM_PROVIDER=${{ secrets.LLM_PROVIDER }}
            
            # OpenAI
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
            OPENAI_EMBEDDING_MODEL=${{ secrets.OPENAI_EMBEDDING_MODEL }}
            
            # Groq (optional)
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            GROQ_MODEL=${{ secrets.GROQ_MODEL }}
            
            # Claude (optional)
            CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
            
            # Bot settings
            CONFIDENCE_THRESHOLD=${{ secrets.CONFIDENCE_THRESHOLD }}
            ENVEOF
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env
            if [ ! -f .env ]; then
              echo "‚ùå ERROR: Failed to create .env file!"
              exit 1
            fi
            
            echo "‚úÖ .env file created successfully"
            
            # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω)
            if [ "$(docker ps -q -f name=immigration_bot)" ]; then
              echo "üì¶ Creating database backup..."
              docker-compose exec -T db pg_dump -U ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_DB }} > backup_$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || echo "‚ö†Ô∏è Backup skipped"
            fi
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
            echo "‚èπÔ∏è Stopping containers..."
            docker-compose down
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
            echo "üì• Pulling latest code..."
            git pull origin main
            
            # –ó–∞–ø—É—Å–∫
            echo "üöÄ Starting containers..."
            docker-compose up -d --build
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
            echo "‚è≥ Waiting for services to start..."
            sleep 15
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞
            echo "‚úÖ Checking status..."
            docker-compose ps
            echo ""
            echo "üìã Recent logs:"
            docker-compose logs --tail=30 bot
            
      - name: Send Telegram notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ${{ job.status == 'success' && '‚úÖ' || '‚ùå' }} –î–µ–ø–ª–æ–π ${{ job.status == 'success' && '—É—Å–ø–µ—à–µ–Ω' || '–ø—Ä–æ–≤–∞–ª–µ–Ω' }}!
            
            –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
            –ö–æ–º–º–∏—Ç: ${{ github.sha }}
            –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            –í–µ—Ç–∫–∞: ${{ github.ref_name }}
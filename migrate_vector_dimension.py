"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ –±–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é
"""

import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
LLM_PROVIDER = os.getenv("LLM_PROVIDER", "openai").lower()

TARGET_DIM = 1536 if LLM_PROVIDER == "openai" else 768

print(f"üîß –ú–∏–≥—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {TARGET_DIM}")
print(f"üìä LLM Provider: {LLM_PROVIDER}")
print("=" * 60)

engine = create_engine(DATABASE_URL)

def check_current_dimension(table_name: str, column_name: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞"""
    with engine.connect() as conn:
        result = conn.execute(text(f"""
            SELECT atttypmod 
            FROM pg_attribute 
            WHERE attrelid = '{table_name}'::regclass 
            AND attname = '{column_name}'
        """))
        row = result.fetchone()
        if row and row[0] > 0:
            return row[0]
        return None

def migrate_table(table_name: str, column_name: str):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ω–æ–≤—É—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å"""
    current_dim = check_current_dimension(table_name, column_name)
    
    print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}.{column_name}")
    print(f"   –¢–µ–∫—É—â–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {current_dim or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
    print(f"   –¶–µ–ª–µ–≤–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {TARGET_DIM}")
    
    if current_dim == TARGET_DIM:
        print(f"   ‚úÖ –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    with engine.begin() as conn:
        print(f"   üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–Ω–∫—É...")
        conn.execute(text(f"""
            ALTER TABLE {table_name} 
            DROP COLUMN IF EXISTS {column_name}
        """))
        
        print(f"   ‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É vector({TARGET_DIM})...")
        conn.execute(text(f"""
            ALTER TABLE {table_name} 
            ADD COLUMN {column_name} vector({TARGET_DIM})
        """))
        
        print(f"   ‚úÖ –ì–æ—Ç–æ–≤–æ!")

def main():
    try:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏!")
        print("   –û–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")
        
        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
        
        if confirm != 'yes':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        print("\nüöÄ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é...\n")
        
        migrate_table('questions', 'question_embedding')
        migrate_table('knowledge_base', 'question_embedding')
        
        print("\n" + "=" * 60)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞: docker-compose restart bot")
        print("   2. –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: docker-compose run --rm bot python -m utils.db_manager")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise

if __name__ == "__main__":
    main()